error.bar <- function(x, y, upper, lower = upper, length = 0.1, horizontal = F,
...) {
if (horizontal) {
arrows(y + upper, x, y - lower, x, angle = 90, code = 3, length = length, ...)
} else {
arrows(x, y + upper, x, y - lower, angle = 90, code = 3, length = length, ...)
}
}
which.colour <- function(df, lim = 2000) { # effectively splits a1-like out
ifelse(df > lim, "#FFCC00", "#b3b3b3")
}
plot.ancestor <- function(df, node, ...) {
means <- aggregate(yHS023_norm ~ gene, data = df, FUN = mean)
means <- means[c(2, 1) ,] # order so MAP first
means <- means[,-1]
sds <- aggregate(yHS023_norm ~ gene, data = df, FUN = sd)
sds <- sds[c(2, 1) ,]
sds <- sds[, -1]
bp <- barplot(means, names.arg = node, col = which.colour(means),
border = "NA", ylim = c(-1000,43000), # -ve ylim so points are
density = c(NA, 25), angle = c(NA, 45), # not truncated
space = 0.1, lend = 2, ...) # lend to square edges
error.bar(bp, means, sds, lend = 2)
maps <- df[which(df$seqtype == "MAP"), ]$yHS023_norm
alts <- df[which(df$seqtype == "AltAll"), ]$yHS023_norm
points(jitter(rep(.5, length(maps))), maps, pch = 1) # off-centre
points(jitter(rep(1.6, length(alts))), alts, pch = 1)
}
df <- read.csv("expression/expression_data.csv", header = T, stringsAsFactors = T)
str(df)
df <- read.csv("expression_data.csv", header = T, stringsAsFactors = T)
# remove uninoculated samples
df <- df[!is.na(df$gene),]
# remove CYP76AD6 background rows
df <- df[!is.na(df$type),]
# any remaining -ves are below yHS023, so we'll set these to zero
df$yHS023_norm[which(df$yHS023_norm < 0)] <- 0
# get ancestors
ancestors <- df[which(df$type == "anc"),]
ancestors$gene <- as.factor(as.character(ancestors$gene))
# list of individual nodes by getting unique elements after stripping MAP and
# AltAll
genes <- unique(sub("_AltAll", "", sub("_MAP", "", levels(ancestors$gene))))
# backbone and origin-specific combination plotting
# backbone (ancs 1-5)
bbgenes <- c("coreDODAa1_nograde_anc", "cary_acha_amaDODAa1_anc",
"acha_amaDODAa1_anc", "GiDODA_a1_a2_limae_anc", "GiDODA_a1_a2_anc")
nodedf <- ancestors[startsWith(as.character(ancestors$gene), "coreDODAa1_nograde_anc"),]
# here we only extract the first instances of coreDODAa1_nograde_anc which are dupped in the sheet
for (i in 2:length(bbgenes)) {
nodedf <- rbind(nodedf, ancestors[startsWith(as.character(ancestors$gene),
bbgenes[i]),])
}
means <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = mean)
for (i in 1:nrow(means)) { # reorder to put map first
if (i%%2 == 0) {
self <- means[i ,]
prev <- means[i-1,]
means[i ,] <- prev
means[i-1,] <- self
}
}
# fix ordering
means <- means[c(5,6,3,4,1,2,9,10,7,8),]
names <- means$gene
means <- means[,2]
sds <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = sd)
for (i in 1:nrow(sds)) { # reorder to put map first
if (i%%2 == 0) {
self <- sds[i ,]
prev <- sds[i-1,]
sds[i ,] <- prev
sds[i-1,] <- self
}
}
# fix ordering
sds <- sds[c(5,6,3,4,1,2,9,10,7,8),]
sds <- sds[,2]
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),5),
angle = rep(c(NA, 45),5), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
nodedf
# backbone and origin-specific combination plotting
# backbone (ancs 1-5)
bbgenes <- c("coreDODAa1_grade_anc", "cary_acha_amaDODAa1_anc",
"acha_amaDODAa1_anc", "GiDODA_a1_a2_limae_anc", "GiDODA_a1_a2_anc")
nodedf <- ancestors[startsWith(as.character(ancestors$gene), "coreDODAa1_grade_anc"),]
nodedf
# here we only extract the first instances of coreDODAa1_nograde_anc which are dupped in the sheet
for (i in 2:length(bbgenes)) {
nodedf <- rbind(nodedf, ancestors[startsWith(as.character(ancestors$gene),
bbgenes[i]),])
}
means <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = mean)
for (i in 1:nrow(means)) { # reorder to put map first
if (i%%2 == 0) {
self <- means[i ,]
prev <- means[i-1,]
means[i ,] <- prev
means[i-1,] <- self
}
}
# fix ordering
means <- means[c(5,6,3,4,1,2,9,10,7,8),]
names <- means$gene
means <- means[,2]
sds <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = sd)
for (i in 1:nrow(sds)) { # reorder to put map first
if (i%%2 == 0) {
self <- sds[i ,]
prev <- sds[i-1,]
sds[i ,] <- prev
sds[i-1,] <- self
}
}
# fix ordering
sds <- sds[c(5,6,3,4,1,2,9,10,7,8),]
sds <- sds[,2]
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),5),
angle = rep(c(NA, 45),5), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
X <- grconvertX(c(0, 15), from = "user", to = "ndc")
Y <- grconvertY(c(-10000, 55000), from = "user", to = "ndc")
par(fig = c(X, Y), new = T)
bp <- barplot(means, names.arg = NULL, col = which.colour(means),
border = "NA", ylim = c(-500, 2000),# -ve ylim so points are
# density = rep(c(NA, 25),5), angle = rep(c(NA, 45),5), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,1000,2000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
dev.off()
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),5),
angle = rep(c(NA, 45),5), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
X <- grconvertX(c(0, 15), from = "user", to = "ndc")
X <- grconvertX(c(0, 15), from = "user", to = "ndc")
Y <- grconvertY(c(-10000, 55000), from = "user", to = "ndc")
par(fig = c(X, Y), new = T)
bp <- barplot(means, names.arg = NULL, col = which.colour(means),
border = "NA", ylim = c(-500, 2000),# -ve ylim so points are
# density = rep(c(NA, 25),5), angle = rep(c(NA, 45),5), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,1000,2000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
# Macau Stegno (ancs 6, 7)
genes <- c("macau_stegnoDODAa1_anc", "stegnoDODAa1_anc")
nodedf <- ancestors[startsWith(as.character(ancestors$gene), "macau_stegnoDODAa1_anc"),]
nodedf <- rbind(nodedf, ancestors[startsWith(as.character(ancestors$gene), "stegnoDODAa1_anc"),])
means <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = mean)
for (i in 1:nrow(means)) { # reorder to put map first
if (i%%2 == 0) {
self <- means[i ,]
prev <- means[i-1,]
means[i ,] <- prev
means[i-1,] <- self
}
}
names <- means$gene
means <- means[, 2]
sds <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = sd)
for (i in 1:nrow(sds)) { # reorder to put map first
if (i%%2 == 0) {
self <- sds[i ,]
prev <- sds[i-1,]
sds[i ,] <- prev
sds[i-1,] <- self
}
}
sds <- sds[, 2]
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),2), angle = rep(c(NA, 45),2), # not truncated
space = rep(c(0.6, 0.2),2), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
X <- grconvertX(c(0, 15), from = "user", to = "ndc")
Y <- grconvertY(c(-10000, 55000), from = "user", to = "ndc")
par(fig = c(X, Y), new = T)
bp <- barplot(means, names.arg = NULL, col = which.colour(means),
border = "NA", ylim = c(-100,1100),# -ve ylim so points are
# density = rep(c(NA, 25),2), angle = rep(c(NA, 45),2), # not truncated
space = rep(c(0.6, 0.2),2), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,500,1000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
# ama origin (ancs 8-12)
amagenes <- c("amaDODAa1_a2_a4_anc", "amaDODAa1_a4_anc", "amaDODAa1_anc",
"amaDODAa4_anc", "amaDODAa2_anc")
nodedf <- ancestors[startsWith(as.character(ancestors$gene), "amaDODAa1_a2_a4_anc"),]
for (i in 2:length(amagenes)) {
nodedf <- rbind(nodedf, ancestors[startsWith(as.character(ancestors$gene),
amagenes[i]),])
}
means <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = mean)
for (i in 1:nrow(means)) { # reorder to put map first
if (i%%2 == 0) {
self <- means[i ,]
prev <- means[i-1,]
means[i ,] <- prev
means[i-1,] <- self
}
}
# fix ordering
means <- means[c(1,2,3,4,5,6,9,10,7,8),]
names <- means$gene
means <- means[,2]
sds <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = sd)
for (i in 1:nrow(sds)) { # reorder to put map first
if (i%%2 == 0) {
self <- sds[i ,]
prev <- sds[i-1,]
sds[i ,] <- prev
sds[i-1,] <- self
}
}
# fix ordering
sds <- sds[c(1,2,3,4,5,6,9,10,7,8),]
sds <- sds[,2]
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),2), angle = rep(c(NA, 45),2), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
# gi origins (ancs 13-17)
gigenes <- c("GiDODA_a1_anc", "GiDODA_a1_raph_anc", "GiDODA_a1_raph_no_kew_anc",
"GiDODA_a1_port_anc", "GiDODA_a2_anc")
nodedf <- ancestors[startsWith(as.character(ancestors$gene), "GiDODA_a1_anc"),]
for (i in 2:length(gigenes)) {
nodedf <- rbind(nodedf, ancestors[startsWith(as.character(ancestors$gene),
gigenes[i]),])
}
means <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = mean)
for (i in 1:nrow(means)) { # reorder to put map first
if (i%%2 == 0) {
self <- means[i ,]
prev <- means[i-1,]
means[i ,] <- prev
means[i-1,] <- self
}
}
# fix ordering
means <- means[c(1,2,5,6,7,8,3,4,9,10),]
names <- means$gene
means <- means[,2]
sds <- aggregate(yHS023_norm ~ gene, data = nodedf, FUN = sd)
for (i in 1:nrow(sds)) { # reorder to put map first
if (i%%2 == 0) {
self <- sds[i ,]
prev <- sds[i-1,]
sds[i ,] <- prev
sds[i-1,] <- self
}
}
# fix ordering
sds <- sds[c(1,2,5,6,7,8,3,4,9,10),]
sds <- sds[,2]
bp <- barplot(means, names.arg = names, col = which.colour(means),
border = "NA", ylim = c(-500, 45000),# -ve ylim so points are
# density = rep(c(NA, 25),2), angle = rep(c(NA, 45),2), # not truncated
space = rep(c(0.6, 0.2),5), xlim = c(0,15), width = 1,
lend = 2, las = 3, yaxt = "n") # lend to square edges
axis(2, at=c(0,20000,40000))
error.bar(bp, means, sds, length = 0.05, lend = 2, col = "#666666")
for (i in 1:length(names)) {
tmp <- ancestors[which(ancestors$gene == names[i]),]$yHS023_norm
points(jitter(rep(bp[i]+0.2, length(tmp))), tmp, pch=1, cex = 0.6,
col = "#666666")
}
# Amaranthaceae DODAa1, a4, a2 first
ama <- df[which(df$experiment == 2),]
cheno <- df[which(df$experiment == 3),]
raph <- df[which(df$experiment == 4),]
port <- df[which(df$experiment == 5),]
# we'll use Ama for Bv, since that has DODAa4 also
# so let's ditch those from cheno
cheno <- cheno[which(cheno$gene != "BvDODAa1_co" &
cheno$gene != "BvDODAa2_co"),]
ext <- rbind(port, raph, cheno, ama)
ama$gene <- as.factor(as.character(ama$gene))
ext$gene <- as.factor(as.character(ext$gene))
treorder <- scan("~/Dropbox/cary_projects/DODA/manuscript/figures/element_files/treorder.taxa",
what = "character")
families <- c("Nyctaginaceae", "Petiveriaceae", "Phytolacaceae", "Aizoaceae",
"Cactaceae", "Portulacaceae", "Anacampserotaceae", "Basellaceae",
"Montiaceae", "Talinaceae", "Agdestidaceae", "Chenopodiaceae",
"Amaranthaceae", "Stegnospermataceae", "Microteaceae", "Kewaceae",
"Didiereaceae", "Phytolaccaceae")
families <- paste(families, "_", sep="")
library(stringi)
treorder <- stri_replace_all_regex(str = treorder, pattern = families,
replacement = "", vectorize_all = FALSE)
# cleaning up edited names
treorder[18] <- "Acleisanthes_purpusiana@47741_ED"
treorder[53] <- "Glotyphylum_uncatum@DN16698"
treorder[55] <- "McDODAa2"
treorder[60] <- "CgDODAa2"
treorder[99] <- "CgDODAa1"
treorder[160] <- "Glotyphylum_uncatum@DN5796"
treorder[161] <- "McDODAa1"
treorder[191] <- "BvDODAa2_co"
treorder[227] <- "BvDODAa1_co"
treorder[238] <- "Chenopodium_quinoa@AUR62006948"
treorder[239] <- "BvDODAa4_co"
# this is all
order <- levels(ext$gene)
order <- order[order(match(order, treorder))]
order <- rev(order)
means <- aggregate(yHS023_norm ~ gene, data = ext, FUN = mean)
means <- means[order(match(means$gene, order)),][, 2]
sds <- aggregate(yHS023_norm ~ gene, data = ext, FUN = sd)
sds <- sds[order(match(sds$gene, order)),][, 2]
# use space vector to define groups in the graph
# spacings = c(rep(0.2, 8), 1.0, rep(0.2, 6), 1.0, rep(0.2, 6), 1.0,
#              rep(0.2, 6), 1.0, rep(0.2, 9), 1.0, rep(0.2, 7), 1.0,
#              rep(0.2, 6))
spacings = c(rep(0.2, 6), 1.0, rep(0.2, 7), 1.0, rep(0.2, 9), 1.0,
rep(0.2, 6), 1.0, rep(0.2, 6), 1.0, rep(0.2, 6), 1.0,
rep(0.2, 8))
bp <- barplot(means, names.arg = 1:length(order),
col = which.colour(means, lim = 1000),
border = "NA", xlim = c(-500,31000),
#space = c(rep(0.2, 6), 1.0, rep(0.2, 6), 1.0, rep(0.2, 9)),
space = spacings,
lend = 2, horiz = T, las = 1, xaxt = "n",
xlab = "Normalised fluorescence", cex.names = 0.6)
axis(1, at = c(0, 10000, 20000, 30000), )
error.bar(bp, means, sds, horizontal = T, length = 0.02, lend = 2, col = "dimgrey")
text(means + 2000, bp, labels = order, cex = 0.5)
